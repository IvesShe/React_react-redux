{"version":3,"sources":["redux/constant.js","redux/reducers/person.js","redux/reducers/index.js","redux/reducers/count.js","redux/store.js","redux/actions/count.js","containers/Count/index.jsx","containers/Person/index.jsx","redux/actions/person.js","App.jsx","index.js"],"names":["INCREMENT","DECREMENT","ADD_PERSON","initState","id","name","age","combineReducers","count","preState","action","console","log","type","data","persons","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","increment","Count","state","value","selectNumber","props","decrement","incrementIfOdd","incrementAsync","this","personCount","ref","c","onClick","Component","connect","length","time","dispatch","setTimeout","Person","addPersion","nameNode","ageNode","personObj","nanoid","addPerson","placeholder","map","p","App","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.2fbf10d7.chunk.js","sourcesContent":["// 該模塊是用於定義action對象中type類型的常量值\r\n\r\nexport const INCREMENT = 'increment'\r\nexport const DECREMENT = 'decrement'\r\nexport const ADD_PERSON = 'add_person'","import {ADD_PERSON} from '../constant'\r\n\r\n// 初始化人的列表\r\nconst initState = [{id:'001',name:'tom',age:18}];\r\n\r\nexport default function personReducer(preState=initState,action){\r\n    console.log(\"@personReducer\");\r\n    // 從action對象中獲取： type、date\r\n    const {type,data} = action;\r\n\r\n    // 根據type決定如何加工數據\r\n    switch(type){\r\n        case ADD_PERSON: // 若是添加一個人\r\n            // preState.unshift(data) // 此處不可以這樣寫，這樣會導致preState被改寫了，presonReducer就不是純函數了\r\n            return [data,...preState]\r\n        default:\r\n            return preState\r\n    }\r\n}","// 該文件用於匯總所有的reducer為一個總的reducer\r\n\r\n// 引入combineReducers，用於匯總多個reducer\r\nimport {combineReducers} from 'redux'\r\n\r\n// 引入為Count組件服務的reducer\r\nimport count from './count'\r\n// 引入為Person組件服務的reducer\r\nimport persons from './person'\r\n\r\n// 匯總所有的reducer變為一個總的reducer\r\nexport default combineReducers({\r\n    count,\r\n    persons\r\n})","// 1. 該文件是用於創建一個為Count組件服務的reducer，reducer的本質就是一個函數\r\n// 2. reducer函數會接到兩個參數，分別為：之前的狀態(preState)，動作對象(action)\r\n\r\nimport {INCREMENT,DECREMENT} from '../constant'\r\n\r\nconst initState = 0;\r\nexport default function countReducer(preState=initState,action){\r\n    console.log(\"@countReducer\");\r\n    //console.log(preState,action);\r\n    // 從action對象中獲取： type、date\r\n    const {type,data} = action;\r\n\r\n    // 根據type決定如何加工數據\r\n    switch(type){\r\n        case INCREMENT: // 如果是加\r\n            console.log(\"@\",preState);\r\n            return preState+data\r\n        case DECREMENT: // 如果是減\r\n            return preState-data\r\n        default:\r\n            return preState\r\n    }\r\n}","// 該文件專門用於暴露一個store對象，整個應用只有一個store對象\r\n\r\n// 引入createStore，專門用於創建redux中最為核心的store對象\r\nimport {applyMiddleware, createStore} from 'redux'\r\n\r\n// 引入匯總之後的reducer\r\nimport reducer from './reducers'\r\n\r\n// 引入redux-thunk，用於支持異步action\r\nimport thunk from 'redux-thunk'\r\n\r\n// 引用redux-devtools-extension\r\nimport {composeWithDevTools} from 'redux-devtools-extension'\r\n\r\n\r\n\r\n// 暴露store\r\nexport default createStore(reducer,composeWithDevTools(applyMiddleware(thunk)))","// 該文件專門為Count組件生成acton對象\r\n\r\nimport {INCREMENT,DECREMENT} from '../constant' \r\n\r\n// 同步action，就是指action的值為Object類型的一般對象\r\nexport const increment = data => ({type:INCREMENT,data})\r\nexport const decrement = data => ({type:DECREMENT,data})\r\n\r\n// 異步action，就是指action的值為函數\r\n// 異步action中一般都會調用同步action，異步action不是必須要用的\r\nexport const incrementAsync = (data,time) =>{\r\n    return (dispatch)=>{\r\n        console.log('increment');\r\n        setTimeout(()=>{\r\n            dispatch(increment(data))\r\n        },time)\r\n    }\r\n}","import React, { Component } from 'react'\r\n\r\n// 引入connect用於連接UI組件與redux\r\nimport {connect} from 'react-redux'\r\n\r\n// 引入action\r\nimport {\r\n    increment,\r\n    decrement,\r\n    incrementAsync,\r\n} from '../../redux/actions/count'\r\n\r\n// 定義UI組件\r\nclass Count extends Component {\r\n\r\n    state = {count:0}\r\n\r\n    // 加法\r\n    increment = () => {\r\n        console.log('increment');\r\n        const {value} = this.selectNumber;\r\n        this.props.increment(value*1);\r\n    }\r\n\r\n    // 減法\r\n    decrement = () => {\r\n        console.log('decrement');\r\n        const {value} = this.selectNumber;\r\n        this.props.decrement(value*1);\r\n    }\r\n\r\n    // 奇數再加\r\n    incrementIfOdd = () => {\r\n        console.log('incrementIfOdd');\r\n        const {value} = this.selectNumber;\r\n        if (this.props.count % 2 !== 0) {\r\n            this.props.increment(value * 1);\r\n        }\r\n    }\r\n\r\n    // 異步加法\r\n    incrementAsync = () => {\r\n        console.log('incrementAsync');\r\n        const {value} = this.selectNumber;\r\n        this.props.incrementAsync(value * 1,500);        \r\n    }\r\n\r\n    render() {\r\n        console.log('UI組件接收到的props是',this.props);\r\n        return (\r\n            <div>\r\n                <h2>我是Count組件</h2>\r\n                <h1>當前求和為：{this.props.count} , 下方組件總人數為: {this.props.personCount}  </h1>\r\n                <select ref={c => this.selectNumber = c}>\r\n                    <option value=\"1\">1</option>\r\n                    <option value=\"2\">2</option>\r\n                    <option value=\"3\">3</option>\r\n                </select>&nbsp;\r\n                <button onClick={this.increment}>+</button>&nbsp;\r\n                <button onClick={this.decrement}>-</button>&nbsp;\r\n                <button onClick={this.incrementIfOdd}>當前求和為奇數再加</button>&nbsp;\r\n                <button onClick={this.incrementAsync}>異步加</button>&nbsp;\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n// mapStateToProps函數返回的是一個對象\r\n// 返回的對象中的key就作為傳遞給UI組件props的key\r\n// value就作為傳遞給UI組件props的value\r\n// mapStateToProps用於傳遞狀態\r\nconst mapStateToProps = (state)=>({\r\n    count:state.count,\r\n    personCount:state.persons.length\r\n})\r\n\r\n// mapDispatchToProps函數返回的是一個對象\r\n// 返回的對象中的key就作為傳遞給UI組件props的key\r\n// value就作為傳遞給UI組件props的value\r\n// mapDispatchToProps用於傳遞操作狀態的方法\r\n// const mapDispatchToProps = (dispatch)=> ({ \r\n    \r\n//     // 通知redux執行加法\r\n//     jia: (number) => dispatch(createIncrementAction(number)),\r\n//     jian: (number) => dispatch(createDecrementAction(number)),\r\n//     jiaAsync: (number, time) => dispatch(createIncrementAsyncAction(number, time))\r\n// })\r\n\r\n// 使用connect()()暴露一個Count的容器組件\r\nexport default connect(\r\n    mapStateToProps,\r\n    //(state)=>({count:state.he}),\r\n\r\n    // mapDispatchToProps的一般寫法\r\n    //mapDispatchToProps    \r\n\r\n    // mapDispatchToProps的簡寫\r\n    // react-redux底層作了優化的封裝，才可以這樣寫\r\n    {\r\n        // increment:increment,\r\n        // increment:decrement,\r\n        // increment:incrementAsync\r\n        increment,\r\n        decrement,\r\n        incrementAsync\r\n    }\r\n)(Count)","import React, { Component } from 'react'\r\nimport {nanoid} from 'nanoid'\r\nimport {connect} from 'react-redux'\r\nimport {addPerson} from '../../redux/actions/person'\r\n\r\nclass Person extends Component {\r\n\r\n    addPersion = ()=>{\r\n        const name = this.nameNode.value;\r\n        const age = this.ageNode.value;\r\n        const personObj = {id:nanoid(),name,age};\r\n        this.props.addPerson(personObj);\r\n        this.nameNode.value = '';\r\n        this.ageNode.value = '';\r\n        //console.log(personObj);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>我是Person組件 , 上方組件求和為 {this.props.count} </h2>\r\n                <input ref={c=>this.nameNode = c} type=\"text\" placeholder=\"輸入名字\" />\r\n                <input ref={c=>this.ageNode = c} type=\"text\" placeholder=\"輸入年齡\" />\r\n                <button onClick={this.addPersion} >添加</button>\r\n                <ul>\r\n                    {\r\n                        this.props.persons.map((p)=>{\r\n                            return <li key={p.id}>{p.name}--{p.age}</li>\r\n                        })\r\n                    \r\n                    }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    state => ({\r\n        persons:state.persons,\r\n        count:state.count\r\n    }),   // 映射狀態\r\n    //{addPerson:addPerson}    // 映射操作狀態的方法\r\n    {addPerson}    // 映射操作狀態的方法\r\n)(Person)","import {ADD_PERSON} from '../constant'\r\n\r\n// 創建增加一個人的action的動作對象\r\nexport const addPerson = personObj => ({type:ADD_PERSON,data:personObj})","import React, { Component } from 'react'\n// 引入Count的容器組件\nimport Count from './containers/Count'\n// 引入Person的容器組件\nimport Person from './containers/Person'\n// import store from './redux/store'\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div>\n        {/* 給容器組件傳遞store */}\n        {/* <Count store={store}/> */}\n        <Count />\n        <hr/>\n        <Person />\n      </div>\n    );\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport store from './redux/store'\nimport {Provider} from 'react-redux'\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* 此處需要用Provider包裏App，目的是讓App所有的後代組件都能接收到store */}\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// 使用react-redux之後，不用再自己監測redux狀態的改變\n// 監測redux中狀態的改變，如redux的狀態發生了改變，那麼重新渲染App組件\n// store.subscribe(()=>{\n//   ReactDOM.render(\n//     <React.StrictMode>\n//       <App />\n//     </React.StrictMode>,\n//     document.getElementById('root')\n//   );\n// })"],"sourceRoot":""}